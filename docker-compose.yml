services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## order Config with Mysql database
  order-mysql:
    container_name: order-mysql
    image: mysql:5.7
    volumes:
      - ./mysql_order_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: order-service
      MYSQL_USER: order
      MYSQL_PASSWORD: Klg@0914759532
  inventory-mysql:
    container_name: inventory-mysql
    image: mysql:5.7
    volumes:
      - ./mysql_inventory_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: inventory-service
      MYSQL_USER: order
      MYSQL_PASSWORD: Klg@0914759532
  ## Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: unless-stopped
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db
  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  ## Eureka Server
  discovery-server:
    build: ./discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8282:8282"
    expose:
      - "8282"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - zipkin
      - discovery-server
  ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    build: ./product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo
      - discovery-server
      - api-gateway
    ports:
      - "8285:8285"
  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    build: ./order-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://order-mysql:3306/order-service
    depends_on:
      - order-mysql
      - broker
      - zipkin
      - discovery-server
      - api-gateway
    ports:
      - "8081:8081"
  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    build: ./inventory-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://inventory-mysql:3306/inventory-service
    depends_on:
      - inventory-mysql
      - discovery-server
      - api-gateway
    ports:
      - "8284:8284"
  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    build: ./notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway
    ports:
      - "8283:8283"