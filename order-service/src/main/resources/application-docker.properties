spring.datasource.url=jdbc:mysql://order-mysql:3306/order-service
spring.datasource.username=order
spring.datasource.password=Klg@0914759532
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

spring.application.name=order-service
server.port= 8081

# Eureka Server Configuration - Assuming Eureka service is named 'eureka-server'
eureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka

# Kafka Producer Properties - Assuming Kafka runs as a Docker service named 'kafka-service'
spring.kafka.producer.bootstrap-servers=broker:29092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Kafka Consumer Properties - Also using the same Kafka service name
spring.kafka.consumer.bootstrap-servers=broker:29092
spring.kafka.consumer.group-id=notificationId
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

# distributed tracing
management.tracing.sampling.probability=1.0

# enable the circuitbreaker endpoints in the actuators
management.health.circuitbreakers.enabled=true
#so that our actuator will activate all kinds of endpoints
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Resilence4j proporties



# to be able to see the open, closed and half open(we move to this state after circuit is open and keeps on checking if open or closed to move to one of the states back )
# so we need this helthindicator to be set true to be in one of the three states
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
# resilence4j will not move to open at first request failure it will stay for some time so to be able
# to receive like maybe 5 then change to open we set the following properties
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
# the rate of failure of the calls if 50 percent move to open
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
# how much time it will stay in openstate before moving to half openstate
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
# recieve 3 calls for example in halfstate and if it still fails move to openstate
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#Resilience4J Timeout Properties

resilience4j.timelimiter.instances.inventory.timeout-duration=3s




#Resilience4j retry properties
# the order service tries in 5s duration 3 times before throwing out the time-out exception from the time limiter
# so that maybe it might be up again in those time intervals
resilience4j.retry.instances.inventory.timeout-duration=3
resilience4j.retry.instances.inventory.wait-duration=5s

# to allow the specific version of dependencies to run
spring.cloud.compatibility-verifier.enabled=false